#!/usr/bin/env node

/**
 * Load environment
 */
require('dotenv').config()

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('autoaccountant:server')
const fs = require('fs')
const path = require('path')
const https = require('https')
const mongoose = require("mongoose")

/**
 * Define database info
 */
const db = process.env.MONGODB_URI || 'mongodb://localhost:27017/autoaccountant'

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Pulling in TLS key and certificate for secure connection
 */

const httpsOptions = {
  key: fs.readFileSync(path.resolve(process.env.APP_HOME || '/opt/apps/autoaccountant', process.env.SECURE_KEY_LOCATION || './config/https.key')),
  cert: fs.readFileSync(path.resolve(process.env.APP_HOME || '/opt/apps/autoaccountant', process.env.SECURE_CERTIFICATE_LOCATION || './config/https.crt'))
}

/**
 * Create HTTPS server.
 */

const server = https.createServer(httpsOptions, app)

/**
 * Listen on provided port, on all network interfaces.
 */
 // Connect mongoose to our database
 mongoose.connect(db, function(error) {
   // Log any errors connecting with mongoose
   if (error) {
     debug(error)
   }
   // Or log a success message
   else {
     debug('mongoose connection is successful')
   }
 })

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      debug(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
